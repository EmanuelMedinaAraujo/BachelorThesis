import torch
from math import pi
from Util import dh_conventions
from Util.forward_kinematics import forward_kinematics


def generate_achievable_goal(dh_parameter: torch.Tensor, device_to_use):
    """
    Generates a random achievable goal for a given set of DH parameters.
    The achievable goal is generated by adding random theta values (from -2Π to 2Π) to the DH parameters and computing the forward
    kinematics to obtain an achievable end effector position.
    """
    # Create random theta values from -2Π top 2Π
    if dh_parameter.dim() == 2:
        # If the input is a single set of DH parameters
        theta_values = (-2 * pi - 2 * pi) * torch.rand(dh_parameter.shape[0], 1) + 2 * pi
    else:
        theta_values = (-2 * pi - 2 * pi) * torch.rand(dh_parameter.shape[0], dh_parameter.shape[1]) + 2 * pi
        theta_values = theta_values.unsqueeze(-1)

    # Ensure that the same device is used
    theta_values = theta_values.to(device_to_use)
    dh_parameter = dh_parameter.to(device_to_use)

    # Add theta values to parameter to obtain valid parameter
    valid_parameter = torch.cat((dh_parameter, theta_values), dim=-1).to(device_to_use)

    fk = forward_kinematics(dh_conventions.dh_to_homogeneous(valid_parameter))

    # Sum of second column of DH parameters
    return fk.get_matrix()[..., :2, 3].to(device_to_use)
